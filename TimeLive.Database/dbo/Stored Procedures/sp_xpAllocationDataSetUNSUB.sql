
CREATE PROCEDURE [dbo].[sp_xpAllocationDataSetUNSUB] 
	-- Add the parameters for the stored procedure here
	@pYear varchar(4), 
	@pMonth varchar(10)
AS
begin
IF @pMonth = '*' 

	begin
		SELECT ROUND(CAST( TTP AS DECIMAL(5,2))/CAST( TTM AS DECIMAL(5,2)),4) as PCT_ALLOC, A._PROJECT_DESCRIPTION AS DIVISION, A._PROJECT_CODE as PROJECT_CODE, A._EMPLOYEE_CODE as EMPLOYEE_CODE, A._PROJECT_MANAGER AS PROJECT_MANAGER, AllDates._DATE as MONTH_NR, A._MONTH
		FROM
			(SELECT _EMPLOYEE_CODE, _PROJECT_CODE, DATEPART(month, _DATE) as _MONTH, _MONTH_NR , _PROJECT_DESCRIPTION, _PROJECT_MANAGER, SUM(_TOTAL_TIME) TTP
				FROM VXP_DETAILMONTHALLOCATION DWA
				WHERE 
					CONVERT(VARCHAR(4), datename(year,_DATE)) = CONVERT(VARCHAR(4),@pYear)
					AND UPPER(_PROJECT_CODE) <> 'XP.ABSENCE'
					AND UPPER(_TASK_CODE) NOT LIKE 'EXTRA%'
					AND _SUBMITTED = 0
				GROUP BY _EMPLOYEE_CODE, _PROJECT_CODE, DATEPART(month, _DATE), _MONTH_NR, _PROJECT_DESCRIPTION, _PROJECT_MANAGER) A 
		INNER JOIN
			(SELECT _EMPLOYEE_CODE, _PROJECT_CODE, REPLACE(CONVERT(varchar(10), _DATE, 111), '/', '-') AS _DATE
				FROM VXP_DETAILMONTHALLOCATION DWA
				WHERE 
					CONVERT(VARCHAR(4), datename(year,_DATE)) = CONVERT(VARCHAR(4),@pYear)
					AND UPPER(_PROJECT_CODE) <> 'XP.ABSENCE'
					AND UPPER(_TASK_CODE) NOT LIKE 'EXTRA%'
					AND _SUBMITTED = 0 ) AllDates
					
			ON	A._EMPLOYEE_CODE = AllDates._EMPLOYEE_CODE AND A._PROJECT_CODE = AllDates._PROJECT_CODE AND A._MONTH = DATEPART(month, _DATE),
			(SELECT _EMPLOYEE_CODE, DATEPART(month, _DATE) _MONTH, _MONTH_NR, SUM(_TOTAL_TIME) TTM
				FROM VXP_DETAILMONTHALLOCATION DWA
				WHERE 
					CONVERT(VARCHAR(4), datename(year,_DATE)) = CONVERT(VARCHAR(4),@pYear)
					AND UPPER(_PROJECT_CODE) <> 'XP.ABSENCE'
					AND UPPER(_TASK_CODE) NOT LIKE 'EXTRA%'
				GROUP BY _EMPLOYEE_CODE, DATEPART(month, _DATE),_MONTH_NR) B
		WHERE A._MONTH_NR = B._MONTH_NR
		AND B.TTM > 0
		AND A._MONTH=B._MONTH
		AND A._EMPLOYEE_CODE = B._EMPLOYEE_CODE
		ORDER BY PROJECT_MANAGER, EMPLOYEE_CODE, _MONTH, PROJECT_CODE
	end
else
	begin
		SELECT ROUND(CAST( TTP AS DECIMAL(5,2))/CAST( TTM AS DECIMAL(5,2)),4) as PCT_ALLOC, A._PROJECT_DESCRIPTION AS DIVISION, A._PROJECT_CODE as PROJECT_CODE, A._EMPLOYEE_CODE as EMPLOYEE_CODE, A._PROJECT_MANAGER AS PROJECT_MANAGER, AllDates._DATE as MONTH_NR, A._MONTH
		FROM
			(SELECT _EMPLOYEE_CODE, _PROJECT_CODE, DATEPART(month, _DATE) as _MONTH, _MONTH_NR , _PROJECT_DESCRIPTION, _PROJECT_MANAGER, SUM(_TOTAL_TIME) TTP
				FROM VXP_DETAILMONTHALLOCATION DWA
				WHERE 
					CONVERT(VARCHAR(7), _DATE, 120) = CONVERT(VARCHAR(7),CONVERT(datetime,convert(varchar,@pYear)+'-'+convert(varchar,@pMonth)+'-01',120),120)
					AND UPPER(_PROJECT_CODE) <> 'XP.ABSENCE'
					AND UPPER(_TASK_CODE) NOT LIKE 'EXTRA%'
					AND _SUBMITTED = 0
				GROUP BY _EMPLOYEE_CODE, _PROJECT_CODE, DATEPART(month, _DATE), _MONTH_NR, _PROJECT_DESCRIPTION, _PROJECT_MANAGER) A 
		INNER JOIN
			(SELECT _EMPLOYEE_CODE, _PROJECT_CODE, REPLACE(CONVERT(varchar(10), _DATE, 111), '/', '-')  AS _DATE
				FROM VXP_DETAILMONTHALLOCATION DWA
				WHERE 
					CONVERT(VARCHAR(7), _DATE, 120) = CONVERT(VARCHAR(7),CONVERT(datetime,convert(varchar,@pYear)+'-'+convert(varchar,@pMonth)+'-01',120),120)
					AND UPPER(_PROJECT_CODE) <> 'XP.ABSENCE'
					AND UPPER(_TASK_CODE) NOT LIKE 'EXTRA%'
					AND _SUBMITTED = 0 ) AllDates
					
			ON	A._EMPLOYEE_CODE = AllDates._EMPLOYEE_CODE AND A._PROJECT_CODE = AllDates._PROJECT_CODE AND A._MONTH = DATEPART(month, _DATE),
			(SELECT _EMPLOYEE_CODE, DATEPART(month, _DATE) _MONTH, _MONTH_NR, SUM(_TOTAL_TIME) TTM
				FROM VXP_DETAILMONTHALLOCATION DWA
				WHERE 
					CONVERT(VARCHAR(7), _DATE, 120) = CONVERT(VARCHAR(7),CONVERT(datetime,convert(varchar,@pYear)+'-'+convert(varchar,@pMonth)+'-01',120),120)	
					AND UPPER(_PROJECT_CODE) <> 'XP.ABSENCE'
					AND UPPER(_TASK_CODE) NOT LIKE 'EXTRA%'
				GROUP BY _EMPLOYEE_CODE, DATEPART(month, _DATE),_MONTH_NR) B
		WHERE A._MONTH_NR = B._MONTH_NR
			AND B.TTM > 0
			AND A._MONTH=B._MONTH
			AND A._EMPLOYEE_CODE = B._EMPLOYEE_CODE
		ORDER BY PROJECT_MANAGER, EMPLOYEE_CODE, _MONTH, PROJECT_CODE


	end



END