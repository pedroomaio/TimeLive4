//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace ProjectManagement.SREmployee {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectTaskEmployee", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
    public partial class ProjectTaskEmployee : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<object> HolidayDaysField;
        
        private double HoursPerDayField;
        
        private int IDField;
        
        private string NameField;
        
        private System.Collections.Generic.List<object> WorkingDaysField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<object> HolidayDays {
            get {
                return this.HolidayDaysField;
            }
            set {
                if ((object.ReferenceEquals(this.HolidayDaysField, value) != true)) {
                    this.HolidayDaysField = value;
                    this.RaisePropertyChanged("HolidayDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HoursPerDay {
            get {
                return this.HoursPerDayField;
            }
            set {
                if ((this.HoursPerDayField.Equals(value) != true)) {
                    this.HoursPerDayField = value;
                    this.RaisePropertyChanged("HoursPerDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<object> WorkingDays {
            get {
                return this.WorkingDaysField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkingDaysField, value) != true)) {
                    this.WorkingDaysField = value;
                    this.RaisePropertyChanged("WorkingDays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="SREmployee.EmployeeService")]
    public interface EmployeeService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmployeeService/DoWork", ReplyAction="urn:EmployeeService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmployeeService/GetEmployees", ReplyAction="urn:EmployeeService/GetEmployeesResponse")]
        System.IAsyncResult BeginGetEmployees(int AccountProjectId, int AccountProjectTaskId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee> EndGetEmployees(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmployeeService/AddAccountProjectTaskEmployee", ReplyAction="urn:EmployeeService/AddAccountProjectTaskEmployeeResponse")]
        System.IAsyncResult BeginAddAccountProjectTaskEmployee(int AccountProjectId, int AccountProjectTaskId, int AccountEmployeeId, decimal AllocationUnits, System.AsyncCallback callback, object asyncState);
        
        bool EndAddAccountProjectTaskEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmployeeService/DeleteAccountProjectTaskEmployee", ReplyAction="urn:EmployeeService/DeleteAccountProjectTaskEmployeeResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ProjectManagement.SREmployee.ProjectTaskEmployee))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        System.IAsyncResult BeginDeleteAccountProjectTaskEmployee(int AccountProjectTaskId, int AccountEmployeeId, System.AsyncCallback callback, object asyncState);
        
        object EndDeleteAccountProjectTaskEmployee(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EmployeeServiceChannel : ProjectManagement.SREmployee.EmployeeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAccountProjectTaskEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAccountProjectTaskEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAccountProjectTaskEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAccountProjectTaskEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeServiceClient : System.ServiceModel.ClientBase<ProjectManagement.SREmployee.EmployeeService>, ProjectManagement.SREmployee.EmployeeService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEmployeesDelegate;
        
        private EndOperationDelegate onEndGetEmployeesDelegate;
        
        private System.Threading.SendOrPostCallback onGetEmployeesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAccountProjectTaskEmployeeDelegate;
        
        private EndOperationDelegate onEndAddAccountProjectTaskEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onAddAccountProjectTaskEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAccountProjectTaskEmployeeDelegate;
        
        private EndOperationDelegate onEndDeleteAccountProjectTaskEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAccountProjectTaskEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public EmployeeServiceClient() {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetEmployeesCompletedEventArgs> GetEmployeesCompleted;
        
        public event System.EventHandler<AddAccountProjectTaskEmployeeCompletedEventArgs> AddAccountProjectTaskEmployeeCompleted;
        
        public event System.EventHandler<DeleteAccountProjectTaskEmployeeCompletedEventArgs> DeleteAccountProjectTaskEmployeeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SREmployee.EmployeeService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ProjectManagement.SREmployee.EmployeeService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ProjectManagement.SREmployee.EmployeeService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((ProjectManagement.SREmployee.EmployeeService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SREmployee.EmployeeService.BeginGetEmployees(int AccountProjectId, int AccountProjectTaskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEmployees(AccountProjectId, AccountProjectTaskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee> ProjectManagement.SREmployee.EmployeeService.EndGetEmployees(System.IAsyncResult result) {
            return base.Channel.EndGetEmployees(result);
        }
        
        private System.IAsyncResult OnBeginGetEmployees(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AccountProjectId = ((int)(inValues[0]));
            int AccountProjectTaskId = ((int)(inValues[1]));
            return ((ProjectManagement.SREmployee.EmployeeService)(this)).BeginGetEmployees(AccountProjectId, AccountProjectTaskId, callback, asyncState);
        }
        
        private object[] OnEndGetEmployees(System.IAsyncResult result) {
            System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee> retVal = ((ProjectManagement.SREmployee.EmployeeService)(this)).EndGetEmployees(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEmployeesCompleted(object state) {
            if ((this.GetEmployeesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEmployeesCompleted(this, new GetEmployeesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEmployeesAsync(int AccountProjectId, int AccountProjectTaskId) {
            this.GetEmployeesAsync(AccountProjectId, AccountProjectTaskId, null);
        }
        
        public void GetEmployeesAsync(int AccountProjectId, int AccountProjectTaskId, object userState) {
            if ((this.onBeginGetEmployeesDelegate == null)) {
                this.onBeginGetEmployeesDelegate = new BeginOperationDelegate(this.OnBeginGetEmployees);
            }
            if ((this.onEndGetEmployeesDelegate == null)) {
                this.onEndGetEmployeesDelegate = new EndOperationDelegate(this.OnEndGetEmployees);
            }
            if ((this.onGetEmployeesCompletedDelegate == null)) {
                this.onGetEmployeesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEmployeesCompleted);
            }
            base.InvokeAsync(this.onBeginGetEmployeesDelegate, new object[] {
                        AccountProjectId,
                        AccountProjectTaskId}, this.onEndGetEmployeesDelegate, this.onGetEmployeesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SREmployee.EmployeeService.BeginAddAccountProjectTaskEmployee(int AccountProjectId, int AccountProjectTaskId, int AccountEmployeeId, decimal AllocationUnits, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAccountProjectTaskEmployee(AccountProjectId, AccountProjectTaskId, AccountEmployeeId, AllocationUnits, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ProjectManagement.SREmployee.EmployeeService.EndAddAccountProjectTaskEmployee(System.IAsyncResult result) {
            return base.Channel.EndAddAccountProjectTaskEmployee(result);
        }
        
        private System.IAsyncResult OnBeginAddAccountProjectTaskEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AccountProjectId = ((int)(inValues[0]));
            int AccountProjectTaskId = ((int)(inValues[1]));
            int AccountEmployeeId = ((int)(inValues[2]));
            decimal AllocationUnits = ((decimal)(inValues[3]));
            return ((ProjectManagement.SREmployee.EmployeeService)(this)).BeginAddAccountProjectTaskEmployee(AccountProjectId, AccountProjectTaskId, AccountEmployeeId, AllocationUnits, callback, asyncState);
        }
        
        private object[] OnEndAddAccountProjectTaskEmployee(System.IAsyncResult result) {
            bool retVal = ((ProjectManagement.SREmployee.EmployeeService)(this)).EndAddAccountProjectTaskEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAccountProjectTaskEmployeeCompleted(object state) {
            if ((this.AddAccountProjectTaskEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAccountProjectTaskEmployeeCompleted(this, new AddAccountProjectTaskEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAccountProjectTaskEmployeeAsync(int AccountProjectId, int AccountProjectTaskId, int AccountEmployeeId, decimal AllocationUnits) {
            this.AddAccountProjectTaskEmployeeAsync(AccountProjectId, AccountProjectTaskId, AccountEmployeeId, AllocationUnits, null);
        }
        
        public void AddAccountProjectTaskEmployeeAsync(int AccountProjectId, int AccountProjectTaskId, int AccountEmployeeId, decimal AllocationUnits, object userState) {
            if ((this.onBeginAddAccountProjectTaskEmployeeDelegate == null)) {
                this.onBeginAddAccountProjectTaskEmployeeDelegate = new BeginOperationDelegate(this.OnBeginAddAccountProjectTaskEmployee);
            }
            if ((this.onEndAddAccountProjectTaskEmployeeDelegate == null)) {
                this.onEndAddAccountProjectTaskEmployeeDelegate = new EndOperationDelegate(this.OnEndAddAccountProjectTaskEmployee);
            }
            if ((this.onAddAccountProjectTaskEmployeeCompletedDelegate == null)) {
                this.onAddAccountProjectTaskEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAccountProjectTaskEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginAddAccountProjectTaskEmployeeDelegate, new object[] {
                        AccountProjectId,
                        AccountProjectTaskId,
                        AccountEmployeeId,
                        AllocationUnits}, this.onEndAddAccountProjectTaskEmployeeDelegate, this.onAddAccountProjectTaskEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SREmployee.EmployeeService.BeginDeleteAccountProjectTaskEmployee(int AccountProjectTaskId, int AccountEmployeeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAccountProjectTaskEmployee(AccountProjectTaskId, AccountEmployeeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        object ProjectManagement.SREmployee.EmployeeService.EndDeleteAccountProjectTaskEmployee(System.IAsyncResult result) {
            return base.Channel.EndDeleteAccountProjectTaskEmployee(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAccountProjectTaskEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AccountProjectTaskId = ((int)(inValues[0]));
            int AccountEmployeeId = ((int)(inValues[1]));
            return ((ProjectManagement.SREmployee.EmployeeService)(this)).BeginDeleteAccountProjectTaskEmployee(AccountProjectTaskId, AccountEmployeeId, callback, asyncState);
        }
        
        private object[] OnEndDeleteAccountProjectTaskEmployee(System.IAsyncResult result) {
            object retVal = ((ProjectManagement.SREmployee.EmployeeService)(this)).EndDeleteAccountProjectTaskEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAccountProjectTaskEmployeeCompleted(object state) {
            if ((this.DeleteAccountProjectTaskEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAccountProjectTaskEmployeeCompleted(this, new DeleteAccountProjectTaskEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAccountProjectTaskEmployeeAsync(int AccountProjectTaskId, int AccountEmployeeId) {
            this.DeleteAccountProjectTaskEmployeeAsync(AccountProjectTaskId, AccountEmployeeId, null);
        }
        
        public void DeleteAccountProjectTaskEmployeeAsync(int AccountProjectTaskId, int AccountEmployeeId, object userState) {
            if ((this.onBeginDeleteAccountProjectTaskEmployeeDelegate == null)) {
                this.onBeginDeleteAccountProjectTaskEmployeeDelegate = new BeginOperationDelegate(this.OnBeginDeleteAccountProjectTaskEmployee);
            }
            if ((this.onEndDeleteAccountProjectTaskEmployeeDelegate == null)) {
                this.onEndDeleteAccountProjectTaskEmployeeDelegate = new EndOperationDelegate(this.OnEndDeleteAccountProjectTaskEmployee);
            }
            if ((this.onDeleteAccountProjectTaskEmployeeCompletedDelegate == null)) {
                this.onDeleteAccountProjectTaskEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAccountProjectTaskEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAccountProjectTaskEmployeeDelegate, new object[] {
                        AccountProjectTaskId,
                        AccountEmployeeId}, this.onEndDeleteAccountProjectTaskEmployeeDelegate, this.onDeleteAccountProjectTaskEmployeeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ProjectManagement.SREmployee.EmployeeService CreateChannel() {
            return new EmployeeServiceClientChannel(this);
        }
        
        private class EmployeeServiceClientChannel : ChannelBase<ProjectManagement.SREmployee.EmployeeService>, ProjectManagement.SREmployee.EmployeeService {
            
            public EmployeeServiceClientChannel(System.ServiceModel.ClientBase<ProjectManagement.SREmployee.EmployeeService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetEmployees(int AccountProjectId, int AccountProjectTaskId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = AccountProjectId;
                _args[1] = AccountProjectTaskId;
                System.IAsyncResult _result = base.BeginInvoke("GetEmployees", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee> EndGetEmployees(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee> _result = ((System.Collections.Generic.List<ProjectManagement.SREmployee.ProjectTaskEmployee>)(base.EndInvoke("GetEmployees", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAccountProjectTaskEmployee(int AccountProjectId, int AccountProjectTaskId, int AccountEmployeeId, decimal AllocationUnits, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = AccountProjectId;
                _args[1] = AccountProjectTaskId;
                _args[2] = AccountEmployeeId;
                _args[3] = AllocationUnits;
                System.IAsyncResult _result = base.BeginInvoke("AddAccountProjectTaskEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddAccountProjectTaskEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddAccountProjectTaskEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAccountProjectTaskEmployee(int AccountProjectTaskId, int AccountEmployeeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = AccountProjectTaskId;
                _args[1] = AccountEmployeeId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAccountProjectTaskEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public object EndDeleteAccountProjectTaskEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                object _result = ((object)(base.EndInvoke("DeleteAccountProjectTaskEmployee", _args, result)));
                return _result;
            }
        }
    }
}
