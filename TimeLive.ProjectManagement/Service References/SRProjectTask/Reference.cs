//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace ProjectManagement.SRProjectTask {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectTask", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ProjectTask : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private System.TimeSpan EffortField;
        
        private int IDField;
        
        private int IndentLevelField;
        
        private bool IsAddPermissionField;
        
        private bool IsDeletePermissionField;
        
        private bool IsUpdatePermissionField;
        
        private bool IsViewPermissionField;
        
        private string NameField;
        
        private string PredecessorField;
        
        private double ProgressPercentField;
        
        private string ResourcesField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Effort {
            get {
                return this.EffortField;
            }
            set {
                if ((this.EffortField.Equals(value) != true)) {
                    this.EffortField = value;
                    this.RaisePropertyChanged("Effort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((this.IndentLevelField.Equals(value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAddPermission {
            get {
                return this.IsAddPermissionField;
            }
            set {
                if ((this.IsAddPermissionField.Equals(value) != true)) {
                    this.IsAddPermissionField = value;
                    this.RaisePropertyChanged("IsAddPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeletePermission {
            get {
                return this.IsDeletePermissionField;
            }
            set {
                if ((this.IsDeletePermissionField.Equals(value) != true)) {
                    this.IsDeletePermissionField = value;
                    this.RaisePropertyChanged("IsDeletePermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUpdatePermission {
            get {
                return this.IsUpdatePermissionField;
            }
            set {
                if ((this.IsUpdatePermissionField.Equals(value) != true)) {
                    this.IsUpdatePermissionField = value;
                    this.RaisePropertyChanged("IsUpdatePermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsViewPermission {
            get {
                return this.IsViewPermissionField;
            }
            set {
                if ((this.IsViewPermissionField.Equals(value) != true)) {
                    this.IsViewPermissionField = value;
                    this.RaisePropertyChanged("IsViewPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Predecessor {
            get {
                return this.PredecessorField;
            }
            set {
                if ((object.ReferenceEquals(this.PredecessorField, value) != true)) {
                    this.PredecessorField = value;
                    this.RaisePropertyChanged("Predecessor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProgressPercent {
            get {
                return this.ProgressPercentField;
            }
            set {
                if ((this.ProgressPercentField.Equals(value) != true)) {
                    this.ProgressPercentField = value;
                    this.RaisePropertyChanged("ProgressPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resources {
            get {
                return this.ResourcesField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourcesField, value) != true)) {
                    this.ResourcesField = value;
                    this.RaisePropertyChanged("Resources");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="SRProjectTask.TaskService")]
    public interface TaskService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TaskService/DoWork", ReplyAction="urn:TaskService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TaskService/GetTasks", ReplyAction="urn:TaskService/GetTasksResponse")]
        System.IAsyncResult BeginGetTasks(int AccountProjectId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> EndGetTasks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TaskService/UpdateAccountProjectTask", ReplyAction="urn:TaskService/UpdateAccountProjectTaskResponse")]
        System.IAsyncResult BeginUpdateAccountProjectTask(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, int Original_AccountProjectTaskId, System.DateTime StartDate, bool IsParentTask, double Duration, string Predecessors, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateAccountProjectTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TaskService/AddAccountProjectTask", ReplyAction="urn:TaskService/AddAccountProjectTaskResponse")]
        System.IAsyncResult BeginAddAccountProjectTask(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, System.DateTime StartDate, double Duration, string Predecessors, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> EndAddAccountProjectTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TaskService/DeleteAccountProjectTask", ReplyAction="urn:TaskService/DeleteAccountProjectTaskResponse")]
        System.IAsyncResult BeginDeleteAccountProjectTask(int AccountProjectTaskId, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteAccountProjectTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TaskService/SetPermissionForTask", ReplyAction="urn:TaskService/SetPermissionForTaskResponse")]
        System.IAsyncResult BeginSetPermissionForTask(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> EndSetPermissionForTask(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TaskServiceChannel : ProjectManagement.SRProjectTask.TaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateAccountProjectTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateAccountProjectTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAccountProjectTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAccountProjectTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAccountProjectTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAccountProjectTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetPermissionForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetPermissionForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<ProjectManagement.SRProjectTask.TaskService>, ProjectManagement.SRProjectTask.TaskService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTasksDelegate;
        
        private EndOperationDelegate onEndGetTasksDelegate;
        
        private System.Threading.SendOrPostCallback onGetTasksCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAccountProjectTaskDelegate;
        
        private EndOperationDelegate onEndUpdateAccountProjectTaskDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAccountProjectTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAccountProjectTaskDelegate;
        
        private EndOperationDelegate onEndAddAccountProjectTaskDelegate;
        
        private System.Threading.SendOrPostCallback onAddAccountProjectTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAccountProjectTaskDelegate;
        
        private EndOperationDelegate onEndDeleteAccountProjectTaskDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAccountProjectTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetPermissionForTaskDelegate;
        
        private EndOperationDelegate onEndSetPermissionForTaskDelegate;
        
        private System.Threading.SendOrPostCallback onSetPermissionForTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetTasksCompletedEventArgs> GetTasksCompleted;
        
        public event System.EventHandler<UpdateAccountProjectTaskCompletedEventArgs> UpdateAccountProjectTaskCompleted;
        
        public event System.EventHandler<AddAccountProjectTaskCompletedEventArgs> AddAccountProjectTaskCompleted;
        
        public event System.EventHandler<DeleteAccountProjectTaskCompletedEventArgs> DeleteAccountProjectTaskCompleted;
        
        public event System.EventHandler<SetPermissionForTaskCompletedEventArgs> SetPermissionForTaskCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SRProjectTask.TaskService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ProjectManagement.SRProjectTask.TaskService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ProjectManagement.SRProjectTask.TaskService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((ProjectManagement.SRProjectTask.TaskService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SRProjectTask.TaskService.BeginGetTasks(int AccountProjectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTasks(AccountProjectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> ProjectManagement.SRProjectTask.TaskService.EndGetTasks(System.IAsyncResult result) {
            return base.Channel.EndGetTasks(result);
        }
        
        private System.IAsyncResult OnBeginGetTasks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AccountProjectId = ((int)(inValues[0]));
            return ((ProjectManagement.SRProjectTask.TaskService)(this)).BeginGetTasks(AccountProjectId, callback, asyncState);
        }
        
        private object[] OnEndGetTasks(System.IAsyncResult result) {
            System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> retVal = ((ProjectManagement.SRProjectTask.TaskService)(this)).EndGetTasks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTasksCompleted(object state) {
            if ((this.GetTasksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTasksAsync(int AccountProjectId) {
            this.GetTasksAsync(AccountProjectId, null);
        }
        
        public void GetTasksAsync(int AccountProjectId, object userState) {
            if ((this.onBeginGetTasksDelegate == null)) {
                this.onBeginGetTasksDelegate = new BeginOperationDelegate(this.OnBeginGetTasks);
            }
            if ((this.onEndGetTasksDelegate == null)) {
                this.onEndGetTasksDelegate = new EndOperationDelegate(this.OnEndGetTasks);
            }
            if ((this.onGetTasksCompletedDelegate == null)) {
                this.onGetTasksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTasksCompleted);
            }
            base.InvokeAsync(this.onBeginGetTasksDelegate, new object[] {
                        AccountProjectId}, this.onEndGetTasksDelegate, this.onGetTasksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SRProjectTask.TaskService.BeginUpdateAccountProjectTask(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, int Original_AccountProjectTaskId, System.DateTime StartDate, bool IsParentTask, double Duration, string Predecessors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAccountProjectTask(AccountProjectId, ParentAccountProjectTaskId, TaskName, TaskDescription, CompletedPercent, DeadlineDate, Original_AccountProjectTaskId, StartDate, IsParentTask, Duration, Predecessors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ProjectManagement.SRProjectTask.TaskService.EndUpdateAccountProjectTask(System.IAsyncResult result) {
            return base.Channel.EndUpdateAccountProjectTask(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAccountProjectTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> AccountProjectId = ((System.Nullable<int>)(inValues[0]));
            System.Nullable<int> ParentAccountProjectTaskId = ((System.Nullable<int>)(inValues[1]));
            string TaskName = ((string)(inValues[2]));
            string TaskDescription = ((string)(inValues[3]));
            double CompletedPercent = ((double)(inValues[4]));
            System.DateTime DeadlineDate = ((System.DateTime)(inValues[5]));
            int Original_AccountProjectTaskId = ((int)(inValues[6]));
            System.DateTime StartDate = ((System.DateTime)(inValues[7]));
            bool IsParentTask = ((bool)(inValues[8]));
            double Duration = ((double)(inValues[9]));
            string Predecessors = ((string)(inValues[10]));
            return ((ProjectManagement.SRProjectTask.TaskService)(this)).BeginUpdateAccountProjectTask(AccountProjectId, ParentAccountProjectTaskId, TaskName, TaskDescription, CompletedPercent, DeadlineDate, Original_AccountProjectTaskId, StartDate, IsParentTask, Duration, Predecessors, callback, asyncState);
        }
        
        private object[] OnEndUpdateAccountProjectTask(System.IAsyncResult result) {
            bool retVal = ((ProjectManagement.SRProjectTask.TaskService)(this)).EndUpdateAccountProjectTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateAccountProjectTaskCompleted(object state) {
            if ((this.UpdateAccountProjectTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAccountProjectTaskCompleted(this, new UpdateAccountProjectTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAccountProjectTaskAsync(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, int Original_AccountProjectTaskId, System.DateTime StartDate, bool IsParentTask, double Duration, string Predecessors) {
            this.UpdateAccountProjectTaskAsync(AccountProjectId, ParentAccountProjectTaskId, TaskName, TaskDescription, CompletedPercent, DeadlineDate, Original_AccountProjectTaskId, StartDate, IsParentTask, Duration, Predecessors, null);
        }
        
        public void UpdateAccountProjectTaskAsync(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, int Original_AccountProjectTaskId, System.DateTime StartDate, bool IsParentTask, double Duration, string Predecessors, object userState) {
            if ((this.onBeginUpdateAccountProjectTaskDelegate == null)) {
                this.onBeginUpdateAccountProjectTaskDelegate = new BeginOperationDelegate(this.OnBeginUpdateAccountProjectTask);
            }
            if ((this.onEndUpdateAccountProjectTaskDelegate == null)) {
                this.onEndUpdateAccountProjectTaskDelegate = new EndOperationDelegate(this.OnEndUpdateAccountProjectTask);
            }
            if ((this.onUpdateAccountProjectTaskCompletedDelegate == null)) {
                this.onUpdateAccountProjectTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAccountProjectTaskCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAccountProjectTaskDelegate, new object[] {
                        AccountProjectId,
                        ParentAccountProjectTaskId,
                        TaskName,
                        TaskDescription,
                        CompletedPercent,
                        DeadlineDate,
                        Original_AccountProjectTaskId,
                        StartDate,
                        IsParentTask,
                        Duration,
                        Predecessors}, this.onEndUpdateAccountProjectTaskDelegate, this.onUpdateAccountProjectTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SRProjectTask.TaskService.BeginAddAccountProjectTask(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, System.DateTime StartDate, double Duration, string Predecessors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAccountProjectTask(AccountProjectId, ParentAccountProjectTaskId, TaskName, TaskDescription, CompletedPercent, DeadlineDate, StartDate, Duration, Predecessors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> ProjectManagement.SRProjectTask.TaskService.EndAddAccountProjectTask(System.IAsyncResult result) {
            return base.Channel.EndAddAccountProjectTask(result);
        }
        
        private System.IAsyncResult OnBeginAddAccountProjectTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> AccountProjectId = ((System.Nullable<int>)(inValues[0]));
            System.Nullable<int> ParentAccountProjectTaskId = ((System.Nullable<int>)(inValues[1]));
            string TaskName = ((string)(inValues[2]));
            string TaskDescription = ((string)(inValues[3]));
            double CompletedPercent = ((double)(inValues[4]));
            System.DateTime DeadlineDate = ((System.DateTime)(inValues[5]));
            System.DateTime StartDate = ((System.DateTime)(inValues[6]));
            double Duration = ((double)(inValues[7]));
            string Predecessors = ((string)(inValues[8]));
            return ((ProjectManagement.SRProjectTask.TaskService)(this)).BeginAddAccountProjectTask(AccountProjectId, ParentAccountProjectTaskId, TaskName, TaskDescription, CompletedPercent, DeadlineDate, StartDate, Duration, Predecessors, callback, asyncState);
        }
        
        private object[] OnEndAddAccountProjectTask(System.IAsyncResult result) {
            System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> retVal = ((ProjectManagement.SRProjectTask.TaskService)(this)).EndAddAccountProjectTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAccountProjectTaskCompleted(object state) {
            if ((this.AddAccountProjectTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAccountProjectTaskCompleted(this, new AddAccountProjectTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAccountProjectTaskAsync(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, System.DateTime StartDate, double Duration, string Predecessors) {
            this.AddAccountProjectTaskAsync(AccountProjectId, ParentAccountProjectTaskId, TaskName, TaskDescription, CompletedPercent, DeadlineDate, StartDate, Duration, Predecessors, null);
        }
        
        public void AddAccountProjectTaskAsync(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, System.DateTime StartDate, double Duration, string Predecessors, object userState) {
            if ((this.onBeginAddAccountProjectTaskDelegate == null)) {
                this.onBeginAddAccountProjectTaskDelegate = new BeginOperationDelegate(this.OnBeginAddAccountProjectTask);
            }
            if ((this.onEndAddAccountProjectTaskDelegate == null)) {
                this.onEndAddAccountProjectTaskDelegate = new EndOperationDelegate(this.OnEndAddAccountProjectTask);
            }
            if ((this.onAddAccountProjectTaskCompletedDelegate == null)) {
                this.onAddAccountProjectTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAccountProjectTaskCompleted);
            }
            base.InvokeAsync(this.onBeginAddAccountProjectTaskDelegate, new object[] {
                        AccountProjectId,
                        ParentAccountProjectTaskId,
                        TaskName,
                        TaskDescription,
                        CompletedPercent,
                        DeadlineDate,
                        StartDate,
                        Duration,
                        Predecessors}, this.onEndAddAccountProjectTaskDelegate, this.onAddAccountProjectTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SRProjectTask.TaskService.BeginDeleteAccountProjectTask(int AccountProjectTaskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAccountProjectTask(AccountProjectTaskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ProjectManagement.SRProjectTask.TaskService.EndDeleteAccountProjectTask(System.IAsyncResult result) {
            return base.Channel.EndDeleteAccountProjectTask(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAccountProjectTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AccountProjectTaskId = ((int)(inValues[0]));
            return ((ProjectManagement.SRProjectTask.TaskService)(this)).BeginDeleteAccountProjectTask(AccountProjectTaskId, callback, asyncState);
        }
        
        private object[] OnEndDeleteAccountProjectTask(System.IAsyncResult result) {
            bool retVal = ((ProjectManagement.SRProjectTask.TaskService)(this)).EndDeleteAccountProjectTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAccountProjectTaskCompleted(object state) {
            if ((this.DeleteAccountProjectTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAccountProjectTaskCompleted(this, new DeleteAccountProjectTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAccountProjectTaskAsync(int AccountProjectTaskId) {
            this.DeleteAccountProjectTaskAsync(AccountProjectTaskId, null);
        }
        
        public void DeleteAccountProjectTaskAsync(int AccountProjectTaskId, object userState) {
            if ((this.onBeginDeleteAccountProjectTaskDelegate == null)) {
                this.onBeginDeleteAccountProjectTaskDelegate = new BeginOperationDelegate(this.OnBeginDeleteAccountProjectTask);
            }
            if ((this.onEndDeleteAccountProjectTaskDelegate == null)) {
                this.onEndDeleteAccountProjectTaskDelegate = new EndOperationDelegate(this.OnEndDeleteAccountProjectTask);
            }
            if ((this.onDeleteAccountProjectTaskCompletedDelegate == null)) {
                this.onDeleteAccountProjectTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAccountProjectTaskCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAccountProjectTaskDelegate, new object[] {
                        AccountProjectTaskId}, this.onEndDeleteAccountProjectTaskDelegate, this.onDeleteAccountProjectTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ProjectManagement.SRProjectTask.TaskService.BeginSetPermissionForTask(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetPermissionForTask(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> ProjectManagement.SRProjectTask.TaskService.EndSetPermissionForTask(System.IAsyncResult result) {
            return base.Channel.EndSetPermissionForTask(result);
        }
        
        private System.IAsyncResult OnBeginSetPermissionForTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ProjectManagement.SRProjectTask.TaskService)(this)).BeginSetPermissionForTask(callback, asyncState);
        }
        
        private object[] OnEndSetPermissionForTask(System.IAsyncResult result) {
            System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> retVal = ((ProjectManagement.SRProjectTask.TaskService)(this)).EndSetPermissionForTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetPermissionForTaskCompleted(object state) {
            if ((this.SetPermissionForTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetPermissionForTaskCompleted(this, new SetPermissionForTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetPermissionForTaskAsync() {
            this.SetPermissionForTaskAsync(null);
        }
        
        public void SetPermissionForTaskAsync(object userState) {
            if ((this.onBeginSetPermissionForTaskDelegate == null)) {
                this.onBeginSetPermissionForTaskDelegate = new BeginOperationDelegate(this.OnBeginSetPermissionForTask);
            }
            if ((this.onEndSetPermissionForTaskDelegate == null)) {
                this.onEndSetPermissionForTaskDelegate = new EndOperationDelegate(this.OnEndSetPermissionForTask);
            }
            if ((this.onSetPermissionForTaskCompletedDelegate == null)) {
                this.onSetPermissionForTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetPermissionForTaskCompleted);
            }
            base.InvokeAsync(this.onBeginSetPermissionForTaskDelegate, null, this.onEndSetPermissionForTaskDelegate, this.onSetPermissionForTaskCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ProjectManagement.SRProjectTask.TaskService CreateChannel() {
            return new TaskServiceClientChannel(this);
        }
        
        private class TaskServiceClientChannel : ChannelBase<ProjectManagement.SRProjectTask.TaskService>, ProjectManagement.SRProjectTask.TaskService {
            
            public TaskServiceClientChannel(System.ServiceModel.ClientBase<ProjectManagement.SRProjectTask.TaskService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetTasks(int AccountProjectId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = AccountProjectId;
                System.IAsyncResult _result = base.BeginInvoke("GetTasks", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> EndGetTasks(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> _result = ((System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask>)(base.EndInvoke("GetTasks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateAccountProjectTask(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, int Original_AccountProjectTaskId, System.DateTime StartDate, bool IsParentTask, double Duration, string Predecessors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = AccountProjectId;
                _args[1] = ParentAccountProjectTaskId;
                _args[2] = TaskName;
                _args[3] = TaskDescription;
                _args[4] = CompletedPercent;
                _args[5] = DeadlineDate;
                _args[6] = Original_AccountProjectTaskId;
                _args[7] = StartDate;
                _args[8] = IsParentTask;
                _args[9] = Duration;
                _args[10] = Predecessors;
                System.IAsyncResult _result = base.BeginInvoke("UpdateAccountProjectTask", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateAccountProjectTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateAccountProjectTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAccountProjectTask(System.Nullable<int> AccountProjectId, System.Nullable<int> ParentAccountProjectTaskId, string TaskName, string TaskDescription, double CompletedPercent, System.DateTime DeadlineDate, System.DateTime StartDate, double Duration, string Predecessors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = AccountProjectId;
                _args[1] = ParentAccountProjectTaskId;
                _args[2] = TaskName;
                _args[3] = TaskDescription;
                _args[4] = CompletedPercent;
                _args[5] = DeadlineDate;
                _args[6] = StartDate;
                _args[7] = Duration;
                _args[8] = Predecessors;
                System.IAsyncResult _result = base.BeginInvoke("AddAccountProjectTask", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> EndAddAccountProjectTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> _result = ((System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask>)(base.EndInvoke("AddAccountProjectTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAccountProjectTask(int AccountProjectTaskId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = AccountProjectTaskId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAccountProjectTask", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteAccountProjectTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteAccountProjectTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetPermissionForTask(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SetPermissionForTask", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> EndSetPermissionForTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask> _result = ((System.Collections.Generic.List<ProjectManagement.SRProjectTask.ProjectTask>)(base.EndInvoke("SetPermissionForTask", _args, result)));
                return _result;
            }
        }
    }
}
